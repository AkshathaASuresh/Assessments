ProblemSet03 - Questions
1.Find the titles of all movies directed by Steven Spielberg. (1 point possible)
mysql> select title from movie where director='Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)

2.Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)
mysql> select ratingdate  from rating where stars>=4 order by ratingdate;
+------------+
| ratingdate |
+------------+
| NULL       |
| NULL       |
| 2011-01-12 |
| 2011-01-19 |
| 2011-01-20 |
| 2011-01-27 |
+------------+
6 rows in set (0.00 sec)

3.Find the titles of all movies that have no ratings. (1 point possible)
mysql> select title from movie where mid not in(select mid from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.00 sec)

4.Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)
mysql> select name  from reviewer re inner join rating rt on re.rid=rt.rid where ratingdate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5.Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)
mysql> create view book as select name,title,stars,ratingdate from rating rt inner join reviewer re on re.rid=rt.rid inner join movie m on m.mid=rt.mid;
Query OK, 0 rows affected (0.23 sec)

mysql> select * from book;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.00 sec)

6.For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)
mysql> select re.name,m.title from rating r1 inner join rating r2 on r1.rid=r2.rid and r1.mid=r2.mid inner join reviewer re on re.rid=r1.rid inner join movie m on m.mid=r1.mid where r2.stars>r1.stars and r2.ratingDate>r1.ratingDate;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
1 row in set (0.00 sec)

7.For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)
mysql> select title,max(stars) as 'num_of_strs' from rating rt inner join movie m where m.mid=rt.mid group by rt.mid;
+-------------------------+-------------+
| title                   | num_of_strs |
+-------------------------+-------------+
| Gone with the Wind      |           4 |
| Snow White              |           5 |
| The Sound of Music      |           3 |
| Raiders of the Lost Ark |           4 |
| E.T.                    |           3 |
| Avatar                  |           5 |
+-------------------------+-------------+
6 rows in set (0.00 sec)

8.For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> select m.title, (max(r1.stars)-min(r2.stars)) as 'Rating spread' from rating r1 inner join rating r2 on r1.rid=r2.rid and r1.mid=r2.mid inner join movie m on m.mid=r1.mid group by r1.mid ;
+-------------------------+---------------+
| title                   | Rating spread |
+-------------------------+---------------+
| Gone with the Wind      |             2 |
| Snow White              |             1 |
| The Sound of Music      |             1 |
| Raiders of the Lost Ark |             2 |
| E.T.                    |             1 |
| Avatar                  |             2 |
+-------------------------+---------------+
6 rows in set (0.00 sec)
9.Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)


10.Find the names of all reviewers who rated Gone with the Wind. (1 point possible)
mysql> select distinct name from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid where title='Gone with the Wind';
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.00 sec)
11.For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)
mysql> select name,title,stars from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid where m.director=re.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)

12.Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

mysql>  select distinct concat(name,"-",title) from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid order by name,title;
+-----------------------------------------+
| concat(name,"-",title)                  |
+-----------------------------------------+
| Ashley White-E.T.                       |
| Brittany Harris-Raiders of the Lost Ark |
| Brittany Harris-The Sound of Music      |
| Chris Jackson-E.T.                      |
| Chris Jackson-Raiders of the Lost Ark   |
| Chris Jackson-The Sound of Music        |
| Daniel Lewis-Snow White                 |
| Elizabeth Thomas-Avatar                 |
| Elizabeth Thomas-Snow White             |
| James Cameron-Avatar                    |
| Mike Anderson-Gone with the Wind        |
| Sarah Martinez-Gone with the Wind       |
+-----------------------------------------+
12 rows in set (0.00 sec)

13.Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)
mysql> select distinct title from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid where name!='Chris Jackson';
+-------------------------+
| title                   |
+-------------------------+
| Gone with the Wind      |
| Snow White              |
| The Sound of Music      |
| Raiders of the Lost Ark |
| Avatar                  |
| E.T.                    |
+-------------------------+
6 rows in set (0.00 sec)

14.For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)
mysql> select distinct concat(re1.name," ",re2.name) from reviewer re1 inner join reviewer re2 inner join rating rt on re1.rid=rt.rid where re1.name!=re2.name group by rt.mid,stars;
+---------------------------------+
| concat(re1.name," ",re2.name)   |
+---------------------------------+
| Daniel Lewis Sarah Martinez     |
| Brittany Harris Sarah Martinez  |
| Mike Anderson Sarah Martinez    |
| Chris Jackson Sarah Martinez    |
| Elizabeth Thomas Sarah Martinez |
| James Cameron Sarah Martinez    |
| Ashley White Sarah Martinez     |
| Sarah Martinez Daniel Lewis     |
+---------------------------------+
8 rows in set (0.00 sec)
mysql> select distinct concat(re1.name," ",re2.name) from reviewer re1 inner join reviewer re2 inner join rating rt on re1.rid=rt.rid where re1.name!=re2.name group by rt.mid;
+---------------------------------+
| concat(re1.name," ",re2.name)   |
+---------------------------------+
| Daniel Lewis Sarah Martinez     |
| Brittany Harris Sarah Martinez  |
| Mike Anderson Sarah Martinez    |
| Chris Jackson Sarah Martinez    |
| Elizabeth Thomas Sarah Martinez |
+---------------------------------+
5 rows in set (0.00 sec)

15.For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select min(stars),name,title from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid group by rt.mid;
+------------+------------------+-------------------------+
| min(stars) | name             | title                   |
+------------+------------------+-------------------------+
|          2 | Sarah Martinez   | Gone with the Wind      |
|          4 | Daniel Lewis     | Snow White              |
|          2 | Brittany Harris  | The Sound of Music      |
|          2 | Brittany Harris  | Raiders of the Lost Ark |
|          2 | Chris Jackson    | E.T.                    |
|          3 | Elizabeth Thomas | Avatar                  |
+------------+------------------+-------------------------+
6 rows in set (0.00 sec)
16.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)
mysql> select title,avg(stars) from reviewer re inner join rating rt on re.rid=rt.rid inner join movie m on m.mid=rt.mid group by rt.mid order by avg(stars) desc,title;
+-------------------------+------------+
| title                   | avg(stars) |
+-------------------------+------------+
| Snow White              |     4.5000 |
| Avatar                  |     4.0000 |
| Raiders of the Lost Ark |     3.3333 |
| Gone with the Wind      |     3.0000 |
| E.T.                    |     2.5000 |
| The Sound of Music      |     2.5000 |
+-------------------------+------------+
6 rows in set (0.00 sec)
17.Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

mysql> select name from reviewer re inner join rating rt on re.rid=rt.rid group by re.rid having count(rt.rid)>=3;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.00 sec)
18.Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select distinct m.title,m.director from movie m join movie mo on m.director=mo.director group by m.mid having count(m.mid)>1 order by m.director,m.title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.00 sec)

19.Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)
 select max(x) ,m.name reviewer re inner join rating rt on re.rid=rt.rid
mysql> select title,average, r from(select title,avg(stars) as average, dense_rank() over(order by avg(stars) desc) as r from movie m inner join rating rt on rt.mid=m.mid group by rt.mid) as t where r=1;
+------------+---------+---+
| title      | average | r |
+------------+---------+---+
| Snow White |  4.5000 | 1 |
+------------+---------+---+
1 row in set (0.00 sec)

20.Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)
mysql> select title,average, r from(select title,avg(stars) as average, dense_rank() over(order by avg(stars)) as r from movie m inner join rating rt on rt.mid=m.mid group by rt.mid) as t where r=1;
+--------------------+---------+---+
| title              | average | r |
+--------------------+---------+---+
| The Sound of Music |  2.5000 | 1 |
| E.T.               |  2.5000 | 1 |
+--------------------+---------+---+
2 rows in set (0.00 sec)

21. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)
mysql> select max(stars),m.director,m.title from rating rt inner join movie m on m.mid=rt.mid where director IS NOT NULL group by rt.mid;
+------------+------------------+-------------------------+
| max(stars) | director         | title                   |
+------------+------------------+-------------------------+
|          4 | Victor Fleming   | Gone with the Wind      |
|          3 | Robert Wise      | The Sound of Music      |
|          4 | Steven Spielberg | Raiders of the Lost Ark |
|          3 | Steven Spielberg | E.T.                    |
|          5 | James Cameron    | Avatar                  |
+------------+------------------+-------------------------+
5 rows in set (0.00 sec)



